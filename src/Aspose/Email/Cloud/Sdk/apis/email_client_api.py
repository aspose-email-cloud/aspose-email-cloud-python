# coding: utf-8

"""
    Aspose.Email for Cloud API Reference

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..api_client import ApiClient


class EmailClientApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def email_client_append_message(self, **kwargs):
        """
        Append message
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.email_client_append_message(async=True)
        >>> result = thread.get()

        :param async bool
        :param str storage:
        :param str account_name1:
        :param str account_name2:
        :param str folder:
        :param str mail_path:
        :param bool mark_as_sent:
        :return: SaaSposeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.email_client_append_message_with_http_info(**kwargs)
        else:
            (data) = self.email_client_append_message_with_http_info(**kwargs)
            return data

    def email_client_append_message_with_http_info(self, **kwargs):
        """
        Append message
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.email_client_append_message_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str storage:
        :param str account_name1:
        :param str account_name2:
        :param str folder:
        :param str mail_path:
        :param bool mark_as_sent:
        :return: SaaSposeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storage', 'account_name1', 'account_name2', 'folder', 'mail_path', 'mark_as_sent']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method email_client_append_message" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'storage' in params:
            query_params.append(('storage', params['storage']))
        if 'account_name1' in params:
            query_params.append(('accountName1', params['account_name1']))
        if 'account_name2' in params:
            query_params.append(('accountName2', params['account_name2']))
        if 'folder' in params:
            query_params.append(('folder', params['folder']))
        if 'mail_path' in params:
            query_params.append(('mailPath', params['mail_path']))
        if 'mark_as_sent' in params:
            query_params.append(('markAsSent', params['mark_as_sent']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/email/client/Append', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SaaSposeResponse',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def email_client_append_mime_message(self, **kwargs):
        """
        Append mime message
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.email_client_append_mime_message(async=True)
        >>> result = thread.get()

        :param async bool
        :param str storage:
        :param str account_name1:
        :param str account_name2:
        :param str folder:
        :param str base64_mime_message:
        :param bool mark_as_sent:
        :return: SaaSposeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.email_client_append_mime_message_with_http_info(**kwargs)
        else:
            (data) = self.email_client_append_mime_message_with_http_info(**kwargs)
            return data

    def email_client_append_mime_message_with_http_info(self, **kwargs):
        """
        Append mime message
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.email_client_append_mime_message_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str storage:
        :param str account_name1:
        :param str account_name2:
        :param str folder:
        :param str base64_mime_message:
        :param bool mark_as_sent:
        :return: SaaSposeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storage', 'account_name1', 'account_name2', 'folder', 'base64_mime_message', 'mark_as_sent']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method email_client_append_mime_message" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'storage' in params:
            query_params.append(('storage', params['storage']))
        if 'account_name1' in params:
            query_params.append(('accountName1', params['account_name1']))
        if 'account_name2' in params:
            query_params.append(('accountName2', params['account_name2']))
        if 'folder' in params:
            query_params.append(('folder', params['folder']))
        if 'mark_as_sent' in params:
            query_params.append(('markAsSent', params['mark_as_sent']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'base64_mime_message' in params:
            body_params = params['base64_mime_message']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/email/client/AppendMime', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SaaSposeResponse',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def email_client_create_folder(self, **kwargs):
        """
        Create folder
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.email_client_create_folder(async=True)
        >>> result = thread.get()

        :param async bool
        :param str storage:
        :param str account_name1:
        :param str account_name2:
        :param str parent_folder:
        :param str name:
        :return: SaaSposeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.email_client_create_folder_with_http_info(**kwargs)
        else:
            (data) = self.email_client_create_folder_with_http_info(**kwargs)
            return data

    def email_client_create_folder_with_http_info(self, **kwargs):
        """
        Create folder
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.email_client_create_folder_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str storage:
        :param str account_name1:
        :param str account_name2:
        :param str parent_folder:
        :param str name:
        :return: SaaSposeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storage', 'account_name1', 'account_name2', 'parent_folder', 'name']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method email_client_create_folder" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'storage' in params:
            query_params.append(('storage', params['storage']))
        if 'account_name1' in params:
            query_params.append(('accountName1', params['account_name1']))
        if 'account_name2' in params:
            query_params.append(('accountName2', params['account_name2']))
        if 'parent_folder' in params:
            query_params.append(('parentFolder', params['parent_folder']))
        if 'name' in params:
            query_params.append(('name', params['name']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/email/client/CreateFolder', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SaaSposeResponse',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def email_client_delete_folder(self, **kwargs):
        """
        Delete folder
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.email_client_delete_folder(async=True)
        >>> result = thread.get()

        :param async bool
        :param str storage:
        :param str account_name1:
        :param str account_name2:
        :param str folder:
        :param bool delete_permanently:
        :return: SaaSposeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.email_client_delete_folder_with_http_info(**kwargs)
        else:
            (data) = self.email_client_delete_folder_with_http_info(**kwargs)
            return data

    def email_client_delete_folder_with_http_info(self, **kwargs):
        """
        Delete folder
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.email_client_delete_folder_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str storage:
        :param str account_name1:
        :param str account_name2:
        :param str folder:
        :param bool delete_permanently:
        :return: SaaSposeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storage', 'account_name1', 'account_name2', 'folder', 'delete_permanently']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method email_client_delete_folder" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'storage' in params:
            query_params.append(('storage', params['storage']))
        if 'account_name1' in params:
            query_params.append(('accountName1', params['account_name1']))
        if 'account_name2' in params:
            query_params.append(('accountName2', params['account_name2']))
        if 'folder' in params:
            query_params.append(('folder', params['folder']))
        if 'delete_permanently' in params:
            query_params.append(('deletePermanently', params['delete_permanently']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/email/client/DeleteFolder', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SaaSposeResponse',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def email_client_delete_message(self, **kwargs):
        """
        Delete message
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.email_client_delete_message(async=True)
        >>> result = thread.get()

        :param async bool
        :param str storage:
        :param str account_name1:
        :param str account_name2:
        :param str message_id:
        :param bool delete_permanently:
        :return: SaaSposeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.email_client_delete_message_with_http_info(**kwargs)
        else:
            (data) = self.email_client_delete_message_with_http_info(**kwargs)
            return data

    def email_client_delete_message_with_http_info(self, **kwargs):
        """
        Delete message
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.email_client_delete_message_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str storage:
        :param str account_name1:
        :param str account_name2:
        :param str message_id:
        :param bool delete_permanently:
        :return: SaaSposeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storage', 'account_name1', 'account_name2', 'message_id', 'delete_permanently']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method email_client_delete_message" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'storage' in params:
            query_params.append(('storage', params['storage']))
        if 'account_name1' in params:
            query_params.append(('accountName1', params['account_name1']))
        if 'account_name2' in params:
            query_params.append(('accountName2', params['account_name2']))
        if 'message_id' in params:
            query_params.append(('messageId', params['message_id']))
        if 'delete_permanently' in params:
            query_params.append(('deletePermanently', params['delete_permanently']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/email/client/DeleteMessage', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SaaSposeResponse',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def email_client_fetch_message(self, **kwargs):
        """
        Fetch message
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.email_client_fetch_message(async=True)
        >>> result = thread.get()

        :param async bool
        :param str storage:
        :param str account_name1:
        :param str account_name2:
        :param str message_id:
        :return: MimeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.email_client_fetch_message_with_http_info(**kwargs)
        else:
            (data) = self.email_client_fetch_message_with_http_info(**kwargs)
            return data

    def email_client_fetch_message_with_http_info(self, **kwargs):
        """
        Fetch message
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.email_client_fetch_message_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str storage:
        :param str account_name1:
        :param str account_name2:
        :param str message_id:
        :return: MimeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storage', 'account_name1', 'account_name2', 'message_id']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method email_client_fetch_message" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'storage' in params:
            query_params.append(('storage', params['storage']))
        if 'account_name1' in params:
            query_params.append(('accountName1', params['account_name1']))
        if 'account_name2' in params:
            query_params.append(('accountName2', params['account_name2']))
        if 'message_id' in params:
            query_params.append(('messageId', params['message_id']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/email/client/Fetch', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='MimeResponse',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def email_client_list_folders(self, **kwargs):
        """
        List folders
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.email_client_list_folders(async=True)
        >>> result = thread.get()

        :param async bool
        :param str storage:
        :param str account_name1:
        :param str account_name2:
        :param str parent_folder:
        :return: ListFoldersResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.email_client_list_folders_with_http_info(**kwargs)
        else:
            (data) = self.email_client_list_folders_with_http_info(**kwargs)
            return data

    def email_client_list_folders_with_http_info(self, **kwargs):
        """
        List folders
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.email_client_list_folders_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str storage:
        :param str account_name1:
        :param str account_name2:
        :param str parent_folder:
        :return: ListFoldersResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storage', 'account_name1', 'account_name2', 'parent_folder']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method email_client_list_folders" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'storage' in params:
            query_params.append(('storage', params['storage']))
        if 'account_name1' in params:
            query_params.append(('accountName1', params['account_name1']))
        if 'account_name2' in params:
            query_params.append(('accountName2', params['account_name2']))
        if 'parent_folder' in params:
            query_params.append(('parentFolder', params['parent_folder']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/email/client/ListFolders', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ListFoldersResponse',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def email_client_list_messages(self, **kwargs):
        """
        List messages
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.email_client_list_messages(async=True)
        >>> result = thread.get()

        :param async bool
        :param str storage:
        :param str account_name1:
        :param str account_name2:
        :param str folder:
        :param bool recursive:
        :param str query_string:
        :return: ListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.email_client_list_messages_with_http_info(**kwargs)
        else:
            (data) = self.email_client_list_messages_with_http_info(**kwargs)
            return data

    def email_client_list_messages_with_http_info(self, **kwargs):
        """
        List messages
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.email_client_list_messages_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str storage:
        :param str account_name1:
        :param str account_name2:
        :param str folder:
        :param bool recursive:
        :param str query_string:
        :return: ListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storage', 'account_name1', 'account_name2', 'folder', 'recursive', 'query_string']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method email_client_list_messages" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'storage' in params:
            query_params.append(('storage', params['storage']))
        if 'account_name1' in params:
            query_params.append(('accountName1', params['account_name1']))
        if 'account_name2' in params:
            query_params.append(('accountName2', params['account_name2']))
        if 'folder' in params:
            query_params.append(('folder', params['folder']))
        if 'recursive' in params:
            query_params.append(('recursive', params['recursive']))
        if 'query_string' in params:
            query_params.append(('queryString', params['query_string']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/email/client/ListMessages', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ListResponse',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def email_client_save_mail_account(self, storage, account_name, host, port, login, password, security_options, protocol_type, description, **kwargs):
        """
        Save mail account
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.email_client_save_mail_account(storage, account_name, host, port, login, password, security_options, protocol_type, description, async=True)
        >>> result = thread.get()

        :param async bool
        :param str storage: (required)
        :param str account_name: (required)
        :param str host: (required)
        :param int port: (required)
        :param str login: (required)
        :param str password: (required)
        :param int security_options: (required)
        :param int protocol_type: (required)
        :param str description: (required)
        :return: SaaSposeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.email_client_save_mail_account_with_http_info(storage, account_name, host, port, login, password, security_options, protocol_type, description, **kwargs)
        else:
            (data) = self.email_client_save_mail_account_with_http_info(storage, account_name, host, port, login, password, security_options, protocol_type, description, **kwargs)
            return data

    def email_client_save_mail_account_with_http_info(self, storage, account_name, host, port, login, password, security_options, protocol_type, description, **kwargs):
        """
        Save mail account
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.email_client_save_mail_account_with_http_info(storage, account_name, host, port, login, password, security_options, protocol_type, description, async=True)
        >>> result = thread.get()

        :param async bool
        :param str storage: (required)
        :param str account_name: (required)
        :param str host: (required)
        :param int port: (required)
        :param str login: (required)
        :param str password: (required)
        :param int security_options: (required)
        :param int protocol_type: (required)
        :param str description: (required)
        :return: SaaSposeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storage', 'account_name', 'host', 'port', 'login', 'password', 'security_options', 'protocol_type', 'description']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method email_client_save_mail_account" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storage' is set
        if ('storage' not in params) or (params['storage'] is None):
            raise ValueError("Missing the required parameter `storage` when calling `email_client_save_mail_account`")
        # verify the required parameter 'account_name' is set
        if ('account_name' not in params) or (params['account_name'] is None):
            raise ValueError("Missing the required parameter `account_name` when calling `email_client_save_mail_account`")
        # verify the required parameter 'host' is set
        if ('host' not in params) or (params['host'] is None):
            raise ValueError("Missing the required parameter `host` when calling `email_client_save_mail_account`")
        # verify the required parameter 'port' is set
        if ('port' not in params) or (params['port'] is None):
            raise ValueError("Missing the required parameter `port` when calling `email_client_save_mail_account`")
        # verify the required parameter 'login' is set
        if ('login' not in params) or (params['login'] is None):
            raise ValueError("Missing the required parameter `login` when calling `email_client_save_mail_account`")
        # verify the required parameter 'password' is set
        if ('password' not in params) or (params['password'] is None):
            raise ValueError("Missing the required parameter `password` when calling `email_client_save_mail_account`")
        # verify the required parameter 'security_options' is set
        if ('security_options' not in params) or (params['security_options'] is None):
            raise ValueError("Missing the required parameter `security_options` when calling `email_client_save_mail_account`")
        # verify the required parameter 'protocol_type' is set
        if ('protocol_type' not in params) or (params['protocol_type'] is None):
            raise ValueError("Missing the required parameter `protocol_type` when calling `email_client_save_mail_account`")
        # verify the required parameter 'description' is set
        if ('description' not in params) or (params['description'] is None):
            raise ValueError("Missing the required parameter `description` when calling `email_client_save_mail_account`")


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'storage' in params:
            query_params.append(('storage', params['storage']))
        if 'account_name' in params:
            query_params.append(('accountName', params['account_name']))
        if 'host' in params:
            query_params.append(('host', params['host']))
        if 'port' in params:
            query_params.append(('port', params['port']))
        if 'login' in params:
            query_params.append(('login', params['login']))
        if 'password' in params:
            query_params.append(('password', params['password']))
        if 'security_options' in params:
            query_params.append(('securityOptions', params['security_options']))
        if 'protocol_type' in params:
            query_params.append(('protocolType', params['protocol_type']))
        if 'description' in params:
            query_params.append(('description', params['description']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/email/client/SaveMailAccount', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SaaSposeResponse',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def email_client_save_mail_o_auth_account(self, storage, account_name, host, port, login, client_id, client_secret, refresh_token, security_options, protocol_type, description, **kwargs):
        """
        Save mail oauth account
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.email_client_save_mail_o_auth_account(storage, account_name, host, port, login, client_id, client_secret, refresh_token, security_options, protocol_type, description, async=True)
        >>> result = thread.get()

        :param async bool
        :param str storage: (required)
        :param str account_name: (required)
        :param str host: (required)
        :param int port: (required)
        :param str login: (required)
        :param str client_id: (required)
        :param str client_secret: (required)
        :param str refresh_token: (required)
        :param int security_options: (required)
        :param int protocol_type: (required)
        :param str description: (required)
        :return: SaaSposeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.email_client_save_mail_o_auth_account_with_http_info(storage, account_name, host, port, login, client_id, client_secret, refresh_token, security_options, protocol_type, description, **kwargs)
        else:
            (data) = self.email_client_save_mail_o_auth_account_with_http_info(storage, account_name, host, port, login, client_id, client_secret, refresh_token, security_options, protocol_type, description, **kwargs)
            return data

    def email_client_save_mail_o_auth_account_with_http_info(self, storage, account_name, host, port, login, client_id, client_secret, refresh_token, security_options, protocol_type, description, **kwargs):
        """
        Save mail oauth account
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.email_client_save_mail_o_auth_account_with_http_info(storage, account_name, host, port, login, client_id, client_secret, refresh_token, security_options, protocol_type, description, async=True)
        >>> result = thread.get()

        :param async bool
        :param str storage: (required)
        :param str account_name: (required)
        :param str host: (required)
        :param int port: (required)
        :param str login: (required)
        :param str client_id: (required)
        :param str client_secret: (required)
        :param str refresh_token: (required)
        :param int security_options: (required)
        :param int protocol_type: (required)
        :param str description: (required)
        :return: SaaSposeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storage', 'account_name', 'host', 'port', 'login', 'client_id', 'client_secret', 'refresh_token', 'security_options', 'protocol_type', 'description']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method email_client_save_mail_o_auth_account" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storage' is set
        if ('storage' not in params) or (params['storage'] is None):
            raise ValueError("Missing the required parameter `storage` when calling `email_client_save_mail_o_auth_account`")
        # verify the required parameter 'account_name' is set
        if ('account_name' not in params) or (params['account_name'] is None):
            raise ValueError("Missing the required parameter `account_name` when calling `email_client_save_mail_o_auth_account`")
        # verify the required parameter 'host' is set
        if ('host' not in params) or (params['host'] is None):
            raise ValueError("Missing the required parameter `host` when calling `email_client_save_mail_o_auth_account`")
        # verify the required parameter 'port' is set
        if ('port' not in params) or (params['port'] is None):
            raise ValueError("Missing the required parameter `port` when calling `email_client_save_mail_o_auth_account`")
        # verify the required parameter 'login' is set
        if ('login' not in params) or (params['login'] is None):
            raise ValueError("Missing the required parameter `login` when calling `email_client_save_mail_o_auth_account`")
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params) or (params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `email_client_save_mail_o_auth_account`")
        # verify the required parameter 'client_secret' is set
        if ('client_secret' not in params) or (params['client_secret'] is None):
            raise ValueError("Missing the required parameter `client_secret` when calling `email_client_save_mail_o_auth_account`")
        # verify the required parameter 'refresh_token' is set
        if ('refresh_token' not in params) or (params['refresh_token'] is None):
            raise ValueError("Missing the required parameter `refresh_token` when calling `email_client_save_mail_o_auth_account`")
        # verify the required parameter 'security_options' is set
        if ('security_options' not in params) or (params['security_options'] is None):
            raise ValueError("Missing the required parameter `security_options` when calling `email_client_save_mail_o_auth_account`")
        # verify the required parameter 'protocol_type' is set
        if ('protocol_type' not in params) or (params['protocol_type'] is None):
            raise ValueError("Missing the required parameter `protocol_type` when calling `email_client_save_mail_o_auth_account`")
        # verify the required parameter 'description' is set
        if ('description' not in params) or (params['description'] is None):
            raise ValueError("Missing the required parameter `description` when calling `email_client_save_mail_o_auth_account`")


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'storage' in params:
            query_params.append(('storage', params['storage']))
        if 'account_name' in params:
            query_params.append(('accountName', params['account_name']))
        if 'host' in params:
            query_params.append(('host', params['host']))
        if 'port' in params:
            query_params.append(('port', params['port']))
        if 'login' in params:
            query_params.append(('login', params['login']))
        if 'client_id' in params:
            query_params.append(('clientId', params['client_id']))
        if 'client_secret' in params:
            query_params.append(('clientSecret', params['client_secret']))
        if 'refresh_token' in params:
            query_params.append(('refreshToken', params['refresh_token']))
        if 'security_options' in params:
            query_params.append(('securityOptions', params['security_options']))
        if 'protocol_type' in params:
            query_params.append(('protocolType', params['protocol_type']))
        if 'description' in params:
            query_params.append(('description', params['description']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/email/client/SaveMailOAuthAccount', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SaaSposeResponse',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def email_client_send(self, **kwargs):
        """
        Send
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.email_client_send(async=True)
        >>> result = thread.get()

        :param async bool
        :param str storage:
        :param str account_name1:
        :param str account_name2:
        :param str mail_path:
        :return: SaaSposeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.email_client_send_with_http_info(**kwargs)
        else:
            (data) = self.email_client_send_with_http_info(**kwargs)
            return data

    def email_client_send_with_http_info(self, **kwargs):
        """
        Send
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.email_client_send_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str storage:
        :param str account_name1:
        :param str account_name2:
        :param str mail_path:
        :return: SaaSposeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storage', 'account_name1', 'account_name2', 'mail_path']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method email_client_send" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'storage' in params:
            query_params.append(('storage', params['storage']))
        if 'account_name1' in params:
            query_params.append(('accountName1', params['account_name1']))
        if 'account_name2' in params:
            query_params.append(('accountName2', params['account_name2']))
        if 'mail_path' in params:
            query_params.append(('mailPath', params['mail_path']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/email/client/Send', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SaaSposeResponse',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def email_client_send_mime(self, **kwargs):
        """
        Send Mime
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.email_client_send_mime(async=True)
        >>> result = thread.get()

        :param async bool
        :param str storage:
        :param str account_name1:
        :param str account_name2:
        :param str base64_mime_message:
        :return: SaaSposeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.email_client_send_mime_with_http_info(**kwargs)
        else:
            (data) = self.email_client_send_mime_with_http_info(**kwargs)
            return data

    def email_client_send_mime_with_http_info(self, **kwargs):
        """
        Send Mime
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.email_client_send_mime_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str storage:
        :param str account_name1:
        :param str account_name2:
        :param str base64_mime_message:
        :return: SaaSposeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storage', 'account_name1', 'account_name2', 'base64_mime_message']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method email_client_send_mime" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'storage' in params:
            query_params.append(('storage', params['storage']))
        if 'account_name1' in params:
            query_params.append(('accountName1', params['account_name1']))
        if 'account_name2' in params:
            query_params.append(('accountName2', params['account_name2']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'base64_mime_message' in params:
            body_params = params['base64_mime_message']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/email/client/SendMime', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SaaSposeResponse',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def email_client_set_read_flag(self, **kwargs):
        """
        Set read flag
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.email_client_set_read_flag(async=True)
        >>> result = thread.get()

        :param async bool
        :param str storage:
        :param str account_name1:
        :param str account_name2:
        :param str message_id:
        :param bool is_read:
        :return: SaaSposeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.email_client_set_read_flag_with_http_info(**kwargs)
        else:
            (data) = self.email_client_set_read_flag_with_http_info(**kwargs)
            return data

    def email_client_set_read_flag_with_http_info(self, **kwargs):
        """
        Set read flag
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.email_client_set_read_flag_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str storage:
        :param str account_name1:
        :param str account_name2:
        :param str message_id:
        :param bool is_read:
        :return: SaaSposeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storage', 'account_name1', 'account_name2', 'message_id', 'is_read']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method email_client_set_read_flag" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'storage' in params:
            query_params.append(('storage', params['storage']))
        if 'account_name1' in params:
            query_params.append(('accountName1', params['account_name1']))
        if 'account_name2' in params:
            query_params.append(('accountName2', params['account_name2']))
        if 'message_id' in params:
            query_params.append(('messageId', params['message_id']))
        if 'is_read' in params:
            query_params.append(('isRead', params['is_read']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/email/client/SetReadFlag', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SaaSposeResponse',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
